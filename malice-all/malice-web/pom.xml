<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<!-- POM file generated with GWT webAppCreator -->
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.kp.malice</groupId>
	<artifactId>portale-gar</artifactId>
	<version>2.7.4</version>
	<packaging>war</packaging>
	<name>Portale Gruppo Agenti RMA</name>

	<properties>
		<!-- Convenience property to set the GWT version -->
		<gwtVersion>2.4.0</gwtVersion>
		<!-- GWT needs at least java 1.5 -->
		<maven.compiler.source>1.6</maven.compiler.source>
		<maven.compiler.target>1.6</maven.compiler.target>
		<webappDirectory>src/main/webapp</webappDirectory>
		<!-- Don't let your Mac use a crazy non-standard encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<org.springframework.version>3.0.6.RELEASE</org.springframework.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>2.3.1</version>
			<scope>test</scope>
		</dependency>
		<!-- javamelody-core -->
		<dependency>
			<groupId>net.bull.javamelody</groupId>
			<artifactId>javamelody-core</artifactId>
			<version>1.37.0</version>
		</dependency>
		<!-- itext, option to add PDF export -->
		<dependency>
			<groupId>com.lowagie</groupId>
			<artifactId>itext</artifactId>
			<version>2.1.7</version>
			<exclusions>
				<exclusion>
					<artifactId>bcmail-jdk14</artifactId>
					<groupId>bouncycastle</groupId>
				</exclusion>
				<exclusion>
					<artifactId>bcprov-jdk14</artifactId>
					<groupId>bouncycastle</groupId>
				</exclusion>
				<exclusion>
					<artifactId>bctsp-jdk14</artifactId>
					<groupId>bouncycastle</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- Google Web Toolkit (GWT) -->
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-user</artifactId>
			<version>${gwtVersion}</version>
			<!-- "provided" so that we don't deploy -->
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-servlet</artifactId>
			<version>${gwtVersion}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-servlet</artifactId>
			<version>${gwtVersion}</version>
			<classifier>sources</classifier>
		</dependency>
		<!-- spring sec -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<!-- end spring sec -->
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-dev</artifactId>
			<version>${gwtVersion}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.7</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.googlecode.gwt.inject</groupId>
			<artifactId>gin</artifactId>
			<version>1.5.0</version>
			<scope>provided</scope>
		</dependency>
		<!-- RequestFactory server -->
		<dependency>
			<groupId>com.google.web.bindery</groupId>
			<artifactId>requestfactory-server</artifactId>
			<version>${gwtVersion}</version>
		</dependency>
		<!-- RequestFactory will use JSR 303 javax.validation if you let it -->
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>1.0.0.GA</version>
			<classifier>sources</classifier>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>4.0.2.GA</version>
			<exclusions>
				<exclusion>
					<groupId>javax.xml.bind</groupId>
					<artifactId>jaxb-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.xml.bind</groupId>
					<artifactId>jaxb-impl</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- end request factory -->
		<!-- needed by GIN -->
		<dependency>
			<groupId>com.google.inject.extensions</groupId>
			<artifactId>guice-assistedinject</artifactId>
			<version>3.0</version>
		</dependency>
		<!-- END needed by GIN -->
		<dependency>
			<groupId>org.vaadin.gwtgraphics</groupId>
			<artifactId>gwt-graphics</artifactId>
			<version>0.9.7</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.adamtacy</groupId>
			<artifactId>gwt-fx</artifactId>
			<version>0.5.0_MS_1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>pl.rmalinowski</groupId>
			<artifactId>gwt2swf</artifactId>
			<version>0.6.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.6.1</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.6.1</version>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.9.0-rc1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>1.9.0-rc1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>1.9.0-rc1</version>
			<classifier>sources</classifier>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>1.9.0-rc1</version>
			<classifier>javadoc</classifier>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>3.0.6.RELEASE</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>commons-httpclient</groupId>
			<artifactId>commons-httpclient</artifactId>
			<version>3.1-rc1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.kp.malice</groupId>
			<artifactId>malice-core</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
	</dependencies>

	<build>
		<!-- Generate compiled stuff in the folder used for developing mode -->
		<outputDirectory>${webappDirectory}/WEB-INF/classes</outputDirectory>

		<!-- <resources> -->
		<!-- <resource> -->
		<!-- <directory>src/main/java</directory> -->
		<!-- <includes> -->
		<!-- <include>**/*.java</include> -->
		<!-- <include>**/*.png</include> -->
		<!-- <include>**/*.gif</include> -->
		<!-- <include>**/*.css</include> -->
		<!-- <include>**/*.ui.xml</include> -->
		<!-- <include>**/*.dtd</include> -->
		<!-- </includes> -->
		<!-- </resource> -->
		<!-- <resource> -->
		<!-- <directory>src/main/resources</directory> -->
		<!-- <includes> -->
		<!-- <include>**/*.xml</include> -->
		<!-- <include>**/*.xls</include> -->
		<!-- <include>**/*.properties</include> -->
		<!-- <include>**/*.dtd</include> -->
		<!-- </includes> -->
		<!-- </resource> -->
		<!-- </resources> -->


		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<webResources>
						<resource>
							<!-- this is relative to the pom.xml directory -->
							<directory>src/main/resources</directory>
							<!-- <targetPath>WEB-INF</targetPath> -->
							<includes>
								<include>**/*.xml</include>
								<include>**/*.properties</include>
								<include>**/*.xls</include>
								<include>**/*.xsd</include>
								<include>**/*.pdf</include>
							</includes>
						</resource>
					</webResources>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<phase>process-sources</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<includeScope>compile</includeScope>
							<outputDirectory>${project.basedir}/src/main/webapp/WEB-INF/lib</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>2.4.1</version>
				<configuration>
					<filesets>
						<fileset>
							<directory>${project.basedir}/src/main/webapp/malice</directory>
							<includes>
								<include>**/**</include>
							</includes>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<!-- requestfactory-apt runs an annotation processor (APT) to instrument 
				its service interfaces so that RequestFactoryServer can decode client requests. 
				Normally you would just have a dependency on requestfactory-apt with <scope>provided</scope>, 
				but that won't work in eclipse due to m2e bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=335036 -->
			<plugin>
				<groupId>org.bsc.maven</groupId>
				<artifactId>maven-processor-plugin</artifactId>
				<version>2.0.5</version>
				<executions>
					<execution>
						<id>process</id>
						<goals>
							<goal>process</goal>
						</goals>
						<phase>generate-sources</phase>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>com.google.web.bindery</groupId>
						<artifactId>requestfactory-apt</artifactId>
						<version>${gwtVersion}</version>
					</dependency>
				</dependencies>
				<configuration>
					<outputDirectory>${project.build.directory}/generated-sources/apt</outputDirectory>
				</configuration>
			</plugin>
			<!-- Google Plugin for Eclipse (GPE) won't see the source generated above 
				by requestfactory-apt unless it is exposed as an additional source dir -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${project.build.directory}/generated-sources/apt</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.0.2</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
				</configuration>
			</plugin>
			<!-- GWT Maven Plugin -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>gwt-maven-plugin</artifactId>
				<version>2.4.0</version>
				<dependencies>
					<dependency>
						<groupId>com.google.gwt</groupId>
						<artifactId>gwt-user</artifactId>
						<version>${gwtVersion}</version>
					</dependency>
					<dependency>
						<groupId>com.google.gwt</groupId>
						<artifactId>gwt-dev</artifactId>
						<version>${gwtVersion}</version>
					</dependency>
					<dependency>
						<groupId>com.google.gwt</groupId>
						<artifactId>gwt-servlet</artifactId>
						<version>${gwtVersion}</version>
					</dependency>
				</dependencies>
				<!-- JS is only needed in the package phase, this speeds up testing -->
				<executions>
					<execution>
						<phase>prepare-package</phase>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
				</executions>
				<!-- Plugin configuration. There are many available options, see gwt-maven-plugin 
					documentation at codehaus.org -->
				<configuration>
					<gwtSdkFirstInClasspath>true</gwtSdkFirstInClasspath>
					<extraJvmArgs>-XX:MaxPermSize=512M -Xmx1024M</extraJvmArgs>
					<module>com.kp.malice.MaliceWeb</module>
					<runTarget>MaliceWeb.html</runTarget>
					<hostedWebapp>${webappDirectory}</hostedWebapp>
					<warSourceDirectory default-value="${basedir}/src/main/webapp" />
					<webappDirectory
						default-value="${project.build.directory}/${project.build.finalName}">${webappDirectory}</webappDirectory>
					<copyWebapp>true</copyWebapp>
					<compileReport>true</compileReport>
				</configuration>
			</plugin>
			<!-- Copy static web files before executing gwt:run -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.4.2</version>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/${project.build.finalName}</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/webapp</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Mark the project for Google Plugin for Eclipse (GPE) -->
			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.8</version>
				<configuration>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>false</downloadJavadocs>
					<wtpversion>2.0</wtpversion>
					<additionalBuildcommands>
						<buildCommand>
							<name>com.google.gwt.eclipse.core.gwtProjectValidator</name>
						</buildCommand>
					</additionalBuildcommands>
					<additionalProjectnatures>
						<projectnature>com.google.gwt.eclipse.core.gwtNature</projectnature>
					</additionalProjectnatures>
				</configuration>
			</plugin>


			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>tomcat-maven-plugin</artifactId>
				<version>1.1</version>
				<configuration>
					<server>myserver</server>
				</configuration>
				<!-- <configuration> -->
				<!-- <url>http://kubepartners.com:8080/manager</url> -->
				<!-- <server>collaudo</server> -->
				<!-- </configuration> -->
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.1</version>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.bsc.maven</groupId>
										<artifactId>
											maven-processor-plugin
										</artifactId>
										<versionRange>
											[2.0.5,)
										</versionRange>
										<goals>
											<goal>process</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<scm>
		<connection>scm:git:git@github.com:KPItaly/malice-web.git</connection>
		<url>scm:git:git@github.com:KPItaly/malice-web.git</url>
		<developerConnection>scm:git:git@github.com:KPItaly/malice-web.git</developerConnection>
	</scm>

	<distributionManagement>
		<repository>
			<id>staging</id>
			<url>http://kubepartners.com:8080/nexus/content/repositories/releases/</url>
		</repository>
		<snapshotRepository>
			<id>snapshots</id>
			<url>http://kubepartners.com:8080/nexus/content/repositories/snapshots/</url>
		</snapshotRepository>
		<site>
			<id>site.server</id>
			<url>file://${project.build.outputDirectory}/releases/site/${project.version}/</url>
		</site>
	</distributionManagement>


</project>
