package com.kp.malice.client.amministrazione;import java.util.Date;import com.google.gwt.core.client.GWT;import com.google.gwt.event.dom.client.ClickEvent;import com.google.gwt.event.dom.client.ClickHandler;import com.google.gwt.uibinder.client.UiBinder;import com.google.gwt.uibinder.client.UiField;import com.google.gwt.user.client.Window;import com.google.gwt.user.client.ui.Button;import com.google.gwt.user.client.ui.Composite;import com.google.gwt.user.client.ui.Label;import com.google.gwt.user.client.ui.TextArea;import com.google.gwt.user.client.ui.TextBox;import com.google.gwt.user.client.ui.Widget;import com.google.gwt.user.datepicker.client.DateBox;import com.kp.malice.client.exception.AgencyAlreadyExistException;import com.kp.malice.shared.MaliceUtil;import com.kp.malice.shared.proxies.AgencyProxy;public class AgencyForm extends Composite {    private static AgencyFormUiBinder uiBinder = GWT.create(AgencyFormUiBinder.class);    interface AgencyFormUiBinder extends UiBinder<Widget, AgencyForm> {    }    private AgencyProxy agency;    private IAmministrazioneViewDisplay.Listener listener;    @UiField    TextBox maliceCodeBox;    @UiField    TextBox rmaCodeBox;    @UiField    TextBox loydsCodeBox;    @UiField    TextBox agencyBox;    @UiField    TextBox ruiNumberBox;    @UiField    DateBox ruiAcceptanceDateBox;    @UiField    TextArea addressBox;    @UiField    TextBox cityBox;    @UiField    TextBox zipCodeBox;    @UiField    TextBox emailBox;    @UiField    TextBox telephoneNumberBox;    @UiField    TextBox ibanAccountBox;    @UiField    Button createButton;    @UiField    TextBox companyNameBox;    @UiField    Label openingClosureDateLabel;    @UiField    Label openingClosureDateValue;    @UiField    Button updateButton;    @UiField    Button deleteButton;    @UiField    Button closeButton;    @UiField    Button openButton;    public AgencyForm() {        initWidget(uiBinder.createAndBindUi(this));        //initialize date filed        ruiAcceptanceDateBox.setFormat(new DateBox.DefaultFormat(MaliceUtil.getDayMonthYearFormat()));        ruiAcceptanceDateBox.getElement().setAttribute("readonly", "readonly");        //initialize button        openButton.setVisible(false);        closeButton.setVisible(false);        deleteButton.setVisible(false);        createButton.setVisible(false);        updateButton.setVisible(false);        // Initialize the agency to null.        setAgencyProxy(null);        // EVENTS        updateButton.addClickHandler(new ClickHandler() {            public void onClick(ClickEvent event) {                if (agency != null && checkMandatoryField()) {                    AgencyProxy editableAgency = listener.prepareUpdateAgency(agency);                    popolateEditableAgency(editableAgency);                    try {                        listener.fireUpdateAgencyRequest(editableAgency, agency);                    } catch (AgencyAlreadyExistException e) {                        manageException(e);                    }                }            }        });        deleteButton.addClickHandler(new ClickHandler() {            public void onClick(ClickEvent event) {                if (agency != null) {                    if (Window.confirm("Eliminare l'agenzia?")) {                        listener.deleteAgency(agency);                    }                }            }        });        createButton.addClickHandler(new ClickHandler() {            public void onClick(ClickEvent event) {                if (checkMandatoryField()) {                    AgencyProxy newAgency = listener.prepareCreationAgency();                    popolateEditableAgency(newAgency);                    try {                        listener.fireCreateAgencyRequest(newAgency);                    } catch (AgencyAlreadyExistException e) {                        manageException(e);                    }                }            }        });        closeButton.addClickHandler(new ClickHandler() {            public void onClick(ClickEvent event) {                AgencyProxy editableAgency = listener.prepareUpdateAgency(agency);                editableAgency.setClosureDate(new Date());                editableAgency.setOpeningDate(null);                try {                    listener.fireUpdateAgencyRequest(editableAgency, agency);                } catch (AgencyAlreadyExistException e) {                    manageException(e);                }            }        });        openButton.addClickHandler(new ClickHandler() {            public void onClick(ClickEvent event) {                if (agency != null) {                    AgencyProxy editableAgency = listener.prepareUpdateAgency(agency);                    editableAgency.setOpeningDate(new Date());                    editableAgency.setClosureDate(null);                    try {                        listener.fireUpdateAgencyRequest(editableAgency, agency);                    } catch (AgencyAlreadyExistException e) {                        manageException(e);                    }                }            }        });    }    /**     * Populate the form fields by agency proxy     *      * @param agency the object by wich populate the form fields     */    public void setAgencyProxy(AgencyProxy agency) {        this.agency = agency;        updateButton.setEnabled(agency != null);        if (agency != null) {            addressBox.setText(agency.getAddress());            agencyBox.setText(agency.getAge());            cityBox.setText(agency.getCity());            companyNameBox.setText(agency.getCompanyName());            emailBox.setText(agency.getEmail());            ibanAccountBox.setText(agency.getIbanAccount());            loydsCodeBox.setText(agency.getLoydsCode());            maliceCodeBox.setText(agency.getMaliceCode());            rmaCodeBox.setText(agency.getRmaCode());            ruiAcceptanceDateBox.setValue(agency.getRuiAcceptanceDate());            ruiNumberBox.setText(agency.getRuiNumber());            telephoneNumberBox.setText(agency.getTelephoneNumber());            zipCodeBox.setText(agency.getZipCode());            //se la data di apertura è nulla riteniamo che l'agenzia sia chiusa (anche se la data di chiusura è nulla)            if (agency.getOpeningDate() == null) {                closeButton.setVisible(false);                openButton.setVisible(true);                openingClosureDateLabel.setText("Closure date:");                Date closureDate = agency.getClosureDate();                if (closureDate == null)                    openingClosureDateValue.setText("");                else                    openingClosureDateValue.setText(MaliceUtil.getDayMonthYearFormat().format(closureDate));            } else {                openButton.setVisible(false);                closeButton.setVisible(true);                openingClosureDateLabel.setText("Opening date:");                openingClosureDateValue.setText(MaliceUtil.getDayMonthYearFormat().format(agency.getOpeningDate()));            }            //visualizza altri button            deleteButton.setVisible(true);            createButton.setVisible(true);            updateButton.setVisible(true);        }    }    /**     * Update the agency editable proxy with value from view form     */    protected void popolateEditableAgency(AgencyProxy editableAgency) {        editableAgency.setAddress(addressBox.getText());        editableAgency.setAge(agencyBox.getText());        editableAgency.setCity(cityBox.getText());        editableAgency.setCompanyName(companyNameBox.getText());        editableAgency.setEmail(emailBox.getText());        editableAgency.setIbanAccount(ibanAccountBox.getText());        editableAgency.setLoydsCode(loydsCodeBox.getText());        editableAgency.setMaliceCode(maliceCodeBox.getText());        editableAgency.setRmaCode(rmaCodeBox.getText());        editableAgency.setRuiAcceptanceDate(ruiAcceptanceDateBox.getValue());        editableAgency.setRuiNumber(ruiNumberBox.getText());        editableAgency.setTelephoneNumber(telephoneNumberBox.getText());        editableAgency.setZipCode(zipCodeBox.getText());    }    private boolean checkMandatoryField() {        if (maliceCodeBox.getText() == null || maliceCodeBox.getText().equals("")) {            // Window.alert("Malice code is mandatory.");            MaliceUtil.showError("Portale Gar code is mandatory");            return false;        }        if (rmaCodeBox.getText() == null || rmaCodeBox.getText().equals("")) {            // Window.alert("Rma code is mandatory.");            MaliceUtil.showError("Rma code is mandatory.");            return false;        }        if (loydsCodeBox.getText() == null || loydsCodeBox.getText().equals("")) {            // Window.alert("Loyds code is mandatory.");            MaliceUtil.showError("Loyds code is mandatory.");            return false;        }        return true;    }    public void setListener(IAmministrazioneViewDisplay.Listener listener) {        this.listener = listener;    }    /**     * @param e     */    private void manageException(AgencyAlreadyExistException e) {        //Window.alert(e.getMessage() + "\nPlease change your data.");        MaliceUtil.showError(e.getMessage() + "\nPlease change your data.");        e.printStackTrace();    }}